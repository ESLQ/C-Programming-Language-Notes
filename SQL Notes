***** General Info *****

Rational database management system
Any collection of related information
Store information
Handles Security
Backup
C.R.U.D - Create, read, update, delete
Rational Databases - Organize data into one or more tables
  Each table has rows and columns
  A unique key identifies each row
  Non-relational
Key-value
Documents
Graphs
Flexible tables
Database Queries
  Queries are requests made to the database management system for specific information
 Primary Keys - always unique
  Surrogate Keys - No relation to the real world
  Natural Keys - Relation to the real world
Foreign keys - stores primary key of another table
Composite Key - Two columns uniquely identifying one row
SQL is a language used for itneracting with Relational Database Management Systems (RDBMS)
Data Query Language (DQL) - Get information that is already stored
Data Definition Language (DDL) - Defining databse schemas (layout)
Data Control Language (DCL) - User and permissions management
Data Manipulation Language (DML) - USed for inserting, updating, and deleting data from database
Queries - A set of instructions given to the RDBMS written in SQL that tells the RDBMS what information you want it to retrieve for you

***** Syntax *****

SELECT employee.name, employee.age
FROM employee
Where employee.salary > 50000

***** Data Types *****

INT
DECIMAL // M = total numbers before decimal point, N = number of digits after decimal
VARCHAR(5) // String of text of length 5
BLOB - Binary Large bject, stores large data
DATE // YYYY-MM-DD
TIME STAMP // YYYY-MM-DD:MM:SS

***** Syntax *****

CREATE TABLE student();
student_id INT PRIMARY KEY,
name VARCHAR(20),
major VARCHAR(20)
PRIMARY KEY(student_id)
DESCRIBE student;
DROP TABLE student; // removes the table
ALTER TABLE student ADD gpa DECIMAL(3, 2); // add rows
INSERT INTO student VALUES(2, 'Name', 'Computer Science')
SELECT * FROM student; // select all from student
NOT NULL - can't insert a NULL value // constraint
DEFAULT 'undecided,' // if NULL, populate with default value, constraint
AUTO_INCREMENT // constraint
UPDATE student
SET major = 'CS'
WHERE major = 'Computer Science';
major = 'CS' OR major = 'CompSci'
DELETE FROM student;

***** Operators *****

= , <> (not equals), >, <, >=, <=, AND, OR

***** Syntax Explanation *****

SELECT(Grab data from) * (Grab everything, can specify columns)
FROM student (location of data we want to select); student.name, student.major
ORDER BY name DESC; order alphabetically // DESC - is reverse alphabetically, ascending is the default - ASC
LIMIT 3 // limits amount of data that is returned
-- // how to write comments
FOREIGN Key(mgr_id) REFERENECES employee(emp_id)
ON DELETE SET NULL
INSERT INTO 
first_name AS forename // changes column name to forename
SELECT DISTINCT branch_id

***** Functions *****

SELECT COUNT(emp_id) // returns how many elements are in the given argument
FROM employee
AVG(salary) - returns the average of a given set of data
SUM(salary) - returns the total of a given set of data
GROUP BY
SELECT SUM(total_sales), client_id
LIKE '%LLC' % = any number of characters can come before // wildcard
_(underscore) represents one character entry
UNION - Combine results of select statements // must grab same data type of elements
employee.first_name
JOIN - Combine data ON ("enter certain condition") RIGHT/LEFT

SELECT (choose columns)
FROM (choose table name)
L/R JOIN (choose another table)
ON (condition needs to be met in order to join)

***** Nested Queries *****

SELECT employee.first_name, employee.last_name
FROM employee
WHERE employee.emp_id IN (
  SELECT works_with.emp_id
  FROM works_with
  WHERE works_with.total_sales > 50000;
  )
ON DELETE SET NULL // used when creating a table, if something is deleted, it's value and all those associated with it are set to NULL, except for the primary key
ON DELETE CASCADE - when a primary key is deleted, the rows with the deleted values are deleted as well
PRIMARY KEY can't be NULL

***** Triggers *****

TRIGGERS - what happesn when other stuff happens
delimiter - sequence of characters for specifying boundaries

DELIMITER $$
CREATE
  TRIGGER my_trigger BEFORE INSERT
  ON employee
  FOR EACH ROW BEGIN 
    INSERT INTO trigger_test VALUES('added employee')
  END $$
DELIMITER;
NEW // inserting something into a row
SELECT * FROM trigger_test;

IF, THEN
ELSEIF
ELSE
END IF;
AFTER DELETE (BEFORE)
DROP TRIGGER my_trigger;

***** ER Diagrams *****

Entity Relationship
Entity - An object we want to model and store information about
Primary Key - Attributes that uniquely identifies an entry in the database table
Composite attribute - An attribute that can be broken up into sub-attributes
Multi-value Attribute - An attribute that can have more than one value
Derived attribute - An attribute that can be derived from the other attributes
Multiple Entities - You can define more than one entity
