//, /* */ - Commenting, same as Java
var myName = "Eric"; // used by the whole class
let myName = "Bob"; // only used in the scope where it's delcared
const pi = 3.14; // can never be changed, static (constant)
console.log(myName) // opens up the console
Operators +, -, *, /, %, ++, --, +=, -=, *=, /=
Declaring variables - var (name of variable you want) = (type anything, but what you type will indicate the type of variable it is, variable is not explicitly defined beforehand)
Strings can use single quotes
Escape characters
\' - single quote
/" - double quote
\\ - back slash
\n - new line
\r - carriage return
\t - tab
\b - backspace
\f - form feed
str.length // gets length of the string
Arrays
Index starts at 0
var myArray = [10, 20, 30];
myArray[1] = 20;
var 2DArray = [[1,2,3],[4,5,6]];
2DArray[1][1] // contains 5
myArray.push(["A", "B"]); // add an array to another array
myArray.pop(); // pops off last element in the array
myArray.shift(); // removes first element of array
myArray.unshift(type in what you want to add); // adds to the start of the array

Functions
function myMethod() {
  ...code...
} // call functions same as Java - myMethod(parameters if needed);
typeof // checks type of variable
var keyword has limited scope (local)
without var keyword, automatically global scope
local variable takes precedent over global variable
Queue data structure
shift(); // removes and returns first item
JSO.stringify(myArray); // turns stuff into a string
nextInLine(); // next element

Strict Equality Operator
=== // does not convert type, both type and value have to be true for it to be true
== // only the value has to be equal
!== // string inequality operator

Conditionals
&& // and
|| // or
if (condition) {
} else if{
} // same as Java

Switch Statements // similar to Java
switch(variableYouWantToSwitch) {
  case 1: // if variableYouWantToSwitch === 1
  answer = "It is 1"
  break;
  default:
  answer = "unknown"
  break;
 }

Javascript Objects - instead of indexes to access data, you use properties
var myDog = { 
  "Name" (property): "Bob" (value), "Color": "brown"}; // seperate with a comma for each property, no comma for last property
 myDag.name(property);
 testObj["Food Name"]; // must use this notation if string has a space
 var myFood = testObj["Food Name"];
 
 Updating object properties
 myDog.name = "Bill";
 myDog['bark'] = "woof!" // adds property
 delete myDog.bark;
 
 Dictionary
 var lookup {
  "alpha" : "Adams" };
  result = lookup[value] (alpha);
[] - square brackets for arrays
{} - curly brackets for objects
.push // add stuff to the array

Math.random() // generate a number between 0 to 1, not inclusive
.floor // rounds decimal numbers down to the nearest whole number
.ceil // rounds decimal numbers up to the nearest whole number
parseInt(str); // returns the string as an integer
ParseInt(str, 2 (base)) // returns the string as a binary number

Ternary operator
return a === b ? true : false;
return number > 0 ? "positive" : num < 0 ? "negative" : "zero"; nested ternary operator
let keyword - cannot declare same variable twice // limited t block scope
var - global scope
const - read only, cannot be reassigned later, use all uppercase letters for the name of the variable

Arrow Functions
=> // return
var myConcat = (arr1, arr2) => arr1.concat(arr2);
Number.isInteger(number) // boolean
arr.filter
Can assign parameter values if no arguments are passed in
... - rest operator, convert everything into one array
[...array1] // prevents mutations (deep copy)

Destructuring syntax
const {variableName : nameOfAssignedVariable} = objectName;
gets value from object from a specfic variable and assigns it to a new variable
const[a, b, , c] = [1, 2, 3, 4, 5, 6]; // a = 1, b = 2, c = 4

Template literals
` (back tick) My name is ${person.name}` // put variables in strings, can add quotes and separate lines

Syntax for Functions and Objects
function makeClass() {
  class Veggie {
      constructor(name) {
        this.name = name;
      }
  }
  return Veggie;
}

get name() {
  return this._food;
} // _(underscore) indicates a private variable

Import and Export
import {capitalizeString} from "./(file_name)"
Must export something first, then you can import to another file
